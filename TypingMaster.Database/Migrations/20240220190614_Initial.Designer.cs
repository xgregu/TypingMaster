// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypingMaster.Database;

#nullable disable

namespace TypingMaster.Database.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20240220190614_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("TypingMaster.Domain.Entities.CultureEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingLevelEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("DifficultyCoefficient")
                        .HasColumnType("REAL");

                    b.Property<uint>("DifficultyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypingLevels");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingLevelNameEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("CultureId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TypingLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("TypingLevelId");

                    b.ToTable("TypingLevelName");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("StatisticsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TextId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.HasIndex("TextId");

                    b.ToTable("TypingTests");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTestStatisticsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ClickPerMinute")
                        .HasColumnType("REAL");

                    b.Property<long>("CompletionTimeMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("EffectivenessPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("MistakesClicks")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OverallRating")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalClicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TypingTestStatistics");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTextEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("CultureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DifficultyLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("DifficultyLevelId");

                    b.ToTable("TypingTexts");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingLevelNameEntity", b =>
                {
                    b.HasOne("TypingMaster.Domain.Entities.CultureEntity", "Culture")
                        .WithMany("TypingLevelNames")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypingMaster.Domain.Entities.TypingLevelEntity", "TypingLevel")
                        .WithMany("TypingLevelNames")
                        .HasForeignKey("TypingLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("TypingLevel");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTestEntity", b =>
                {
                    b.HasOne("TypingMaster.Domain.Entities.TypingTestStatisticsEntity", "Statistics")
                        .WithOne("TypingTest")
                        .HasForeignKey("TypingMaster.Domain.Entities.TypingTestEntity", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypingMaster.Domain.Entities.TypingTextEntity", "Text")
                        .WithMany("Tests")
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statistics");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTextEntity", b =>
                {
                    b.HasOne("TypingMaster.Domain.Entities.CultureEntity", "Culture")
                        .WithMany("TypingTexts")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypingMaster.Domain.Entities.TypingLevelEntity", "DifficultyLevel")
                        .WithMany("TypingTexts")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("DifficultyLevel");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.CultureEntity", b =>
                {
                    b.Navigation("TypingLevelNames");

                    b.Navigation("TypingTexts");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingLevelEntity", b =>
                {
                    b.Navigation("TypingLevelNames");

                    b.Navigation("TypingTexts");
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTestStatisticsEntity", b =>
                {
                    b.Navigation("TypingTest")
                        .IsRequired();
                });

            modelBuilder.Entity("TypingMaster.Domain.Entities.TypingTextEntity", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
