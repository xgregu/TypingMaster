@inject ITestService TestService
@inject ITestStore TestStore

@if (_test is not null)
{
    <Table Striped Responsive>
        <TableBody>
            <TableRow>
                <TableRowCell>Ranking</TableRowCell>
                <TableRowCell>@_testRanking</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Punkty</TableRowCell>
                <TableRowCell>@_testStatistic?.OverallRating</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Typ</TableRowCell>
                <TableRowCell>@_test?.TestTypeName</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Czas trwania</TableRowCell>
                <TableRowCell>@_testStatistic?.CompletionTime.Humanize() (@_testStatistic?.CompletionTime)</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Kliknięć na minutę</TableRowCell>
                <TableRowCell>@_testStatistic?.ClickPerSecond</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Skuteczność</TableRowCell>
                <TableRowCell>@(_testStatistic?.EffectivenessPercentage)%</TableRowCell>
            </TableRow>
        </TableBody>
    </Table>
}

@code {
    private TestStatistic _testStatistic;
    private int _testRanking;
    private Test? _test;
    

    [Parameter]
    [EditorRequired]
    public Test? Test
    {
        get => _test;
        set
        {
            _test = value;
            if(_test is not null)
                _ = Refresh();
        }
    }

    private async Task Refresh()
    {
        _testStatistic = TestService.GetTestStatistic(_test);
        _testRanking = await TestStore.GetTestRanking(_test.Id);
        _ = InvokeAsync(StateHasChanged);
    }
}