@inject ITestStore TestStore
<DataGrid @ref="_tableRef" 
    TItem="TestComplete"
          Data="@_testList"
          ReadData="@OnReadData"
          TotalItems="@_totalTests"
          PageSize="5"
          ShowPager
          Responsive>
    <DataGridCommandColumn/>
    <DataGridColumn Field="@nameof(TestComplete.Id)" Caption="#" Sortable="false"/>
    <DataGridColumn Field="@nameof(TestComplete.TestTypeName)" Caption="Typ" Editable/>

    <DataGridColumn Field="@nameof(TestComplete.ExecutorName)" Caption="Imię" Editable/>
</DataGrid>

@code{
    private IReadOnlyList<TestComplete> _testList;
    private int _totalTests;
    private DataGrid<TestComplete> _tableRef;


    private async Task OnReadData(DataGridReadDataEventArgs<TestComplete> e)
    {
        _testList = await TestStore.GetAllTest();
        if (!e.CancellationToken.IsCancellationRequested)
        {
            var response = e.ReadDataMode switch
            {
                DataGridReadDataMode.Virtualize => _testList.Skip(e.VirtualizeOffset).Take(e.VirtualizeCount).ToList(),
                DataGridReadDataMode.Paging => _testList.Skip((e.Page - 1) * e.PageSize).Take(e.PageSize).ToList(),
                _ => throw new Exception("Unhandled ReadDataMode")
                };

            if (!e.CancellationToken.IsCancellationRequested)
            {
                _totalTests = _testList.Count;
                _testList = new List<TestComplete>(response);
            }
        }
    }

    public async Task Refresh()
    {
        await _tableRef.Refresh();
    }
}