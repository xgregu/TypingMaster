@inject ILogger<TestTableComponent> Logger
@inject ITestStore TestStore
@inject ITestService TestService
@implements IDisposable

<DataGrid @ref="_tableRef"
          TItem="Test"
          Data="@_testList"
          ReadData="@OnReadData"
          TotalItems="@_totalTests"
          PageSize="5"
          ShowPager
          Responsive
          SortMode="DataGridSortMode.Single">
    <DataGridCommandColumn/>
    <DataGridColumn Field="@nameof(Test.Id)" Caption="#" Sortable="false"/>
    <DataGridColumn Field="@nameof(Test.TestTypeName)" Caption="Typ" Editable/>
    <DataGridColumn Field="@nameof(Test.ExecutorName)" Caption="Imię" Editable/>
    <DataGridColumn Field="@($"{nameof(Test.Statistic)}.{nameof(Test.Statistic.TestLenght)}")" Caption="Długość" Editable/>
    <DataGridColumn Field="@($"{nameof(Test.Statistic)}.{nameof(Test.Statistic.Mistakes)}")" Caption="Błędy" Editable/>
    <DataGridColumn Field="@($"{nameof(Test.Statistic)}.{nameof(Test.Statistic.CompletionTime)}")" Caption="Czas" Editable>
        <DisplayTemplate>
            @{
                var completionTime = (context as Test)?.Statistic.CompletionTime;

                if (completionTime != null)
                {
                    @(completionTime.Value.Humanize())
                }
            }
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn Field="@($"{nameof(Test.Statistic)}.{nameof(Test.Statistic.EffectivenessPercentage)}")" Caption="Skuteczność" Editable/>
    <DataGridColumn Field="@($"{nameof(Test.Statistic)}.{nameof(Test.Statistic.ClickPerSecond)}")" Caption="Kliknięć na sekundę" Editable/>
</DataGrid>

@code{

    [Parameter]
    public Expression<Func<Test, bool>> TestFilter { get; set; }

    private DataGrid<Test> _tableRef;
    private IReadOnlyList<Test> _testList;
    private int _totalTests;

    protected override void OnInitialized()
    {
        TestStore.TestUpdated += TestStoreOnTestUpdated;
        base.OnInitialized();
    }

    private async void TestStoreOnTestUpdated(object? sender, Test e)
    {
        await _tableRef.Reload();
    }

    private async Task OnReadData(DataGridReadDataEventArgs<Test> e)
    {
        if (e.CancellationToken.IsCancellationRequested)
            return;
        var sortColumnInfo = e.Columns.FirstOrDefault(x => x.SortDirection != SortDirection.Default);
        var response = await TestStore.GetTableData(e, TestFilter, sortColumnInfo);
        
        _testList = response.TestList;
        _totalTests = response.TestCount;
    }

    public void Dispose()
    {
        TestStore.TestUpdated -= TestStoreOnTestUpdated;
    }
}