@inject ILogger<TestTableComponent> Logger
@inject ITestStore TestStore
@inject ITestService TestService
@implements IDisposable

<DataGrid @ref="_tableRef"
          TItem="TestTableModel"
          Data="@_testList"
          Responsive
          Sortable="false"
          Filterable="false"
          Virtualize
          Striped
          RowDoubleClicked="OnRowDoubleClicked">
    <DataGridColumns>
        <DataGridCommandColumn/>
        <DataGridColumn Field="@nameof(TestTableModel.Id)" Caption="#">
            <DisplayTemplate>
                @{
                    var id = (context as TestTableModel)?.Id;

                    if (id != Guid.Empty || id != null)
                    {
                        @(GetIndex(id.Value))
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(TestTableModel.TestDate)" Caption="Data">
            <DisplayTemplate>
                @{
                    var dateTime = (context as TestTableModel)?.TestDate;

                    if (dateTime != null)
                    {
                        @(dateTime.Value.ToString("dd.MM.yyyy HH:mm"))
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(TestTableModel.TestTypeName)" Caption="Typ" Editable/>
        <DataGridColumn Field="@nameof(TestTableModel.ExecutorName)" Caption="Imię" Editable/>
        <DataGridColumn Field="@nameof(TestTableModel.Points)" Caption="Punkty" Editable/>
    </DataGridColumns>
    <EmptyTemplate>
        <Paragraph>Nikt nie wykonał jeszcze testu. Bądź pierwszy!</Paragraph>
    </EmptyTemplate>
    <LoadingTemplate>
        <SpinKit Type="SpinKitType.Fold" Size="1rem" Centered="true"/>
    </LoadingTemplate>
</DataGrid>
<Text TextColor="TextColor.Success">
    <Icon Name="IconName.Lightbulb"/>
</Text>
<Text TextColor="TextColor.Secondary">
    Wybierz test aby wyświetlić szczegółowe statysyki
</Text>
<TestStatisticComponent @ref="_testStatisticComponentRef"></TestStatisticComponent>

@code{

    private TestStatisticComponent _testStatisticComponentRef;
    private DataGrid<TestTableModel> _tableRef;
    private IReadOnlyList<TestTableModel> _testList;
    private int _totalTests;

    protected override async Task OnInitializedAsync()
    {
        TestStore.TestUpdated += TestStoreOnTestUpdated;
        await UpdateTests();
        await base.OnInitializedAsync();
    }

    private async void TestStoreOnTestUpdated(object? sender, Test e)
    {
        await UpdateTests();
        await _tableRef.Reload();
        await _tableRef.Refresh();
        StateHasChanged();
    }

    public void Dispose()
    {
        TestStore.TestUpdated -= TestStoreOnTestUpdated;
    }

    public async Task ScrollToTest(Guid testId)
    {
        var row = GetIndex(testId);
        await _tableRef.ScrollToRow(row);

        var item = _testList.First(x => x.Id == testId);
        await _tableRef.Select(item);
    }

    private async void OnRowDoubleClicked(DataGridRowMouseEventArgs<TestTableModel> obj)
    {
        await _testStatisticComponentRef.Show(obj.Item);
    }

    private async Task UpdateTests()
    {
        var allTest = await TestStore.GetAllTest();
        _testList = allTest.Select(x =>
        {
            var testStatistic = TestService.GetTestStatistic(x);
            return new TestTableModel
            {
                Id = x.Id,
                TestType = x.TestType,
                TextToRewritten = x.TextToRewritten,
                ExecutorName = x.ExecutorName,
                TestDate = x.TestDate,
                InorrectClicks = x.InorrectClicks,
                TotalClicks = x.TotalClicks,
                StartTime = x.StartTime,
                EndTime = x.EndTime,
                TestLenght = testStatistic.TestLenght,
                EffectivenessPercentage = testStatistic.EffectivenessPercentage,
                ClickPerSecond = testStatistic.ClickPerSecond,
                CompletionTime = testStatistic.CompletionTime,
                Mistakes = testStatistic.Mistakes,
                Points = testStatistic.OverallRating
            };
        }).OrderByDescending(x => x.Points).ToList();
    }

    private int GetIndex(Guid testId)
    {
        return _testList.ToList().FindIndex(x => x.Id == testId) + 1;
    }
}