@inject ILogger<TestTableComponent> Logger
@inject ITestStore TestStore
@inject ITestService TestService
@inject ICourier Courier
@implements IDisposable

<Div Flex="Flex.JustifyContent.Center.Column">
    <DataGrid @ref="_tableRef"
              TItem="TestTableModel"
              Data="@_testList"
              Responsive
              Sortable="false"
              Filterable="false"
              Virtualize
              VirtualizeOptions="@(new VirtualizeOptions {DataGridHeight = "100%"})"
              DetailRowTrigger="DetailRowTrigger"
              @bind-SelectedRow="@_selectedTest"
              Striped>
        <DataGridColumns>
            <DataGridCommandColumn/>
            <DataGridColumn Field="@nameof(TestTableModel.Id)" Caption="#">
                <DisplayTemplate>
                    @{
                        var id = (context as TestTableModel)?.Id;
                        if (id != Guid.Empty && id != null)
                            @(GetIndex(id.Value))
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(TestTableModel.TestDate)" Caption="Data">
                <DisplayTemplate>
                    @{
                        var dateTime = (context as TestTableModel)?.TestDate;
                        if (dateTime != null)
                            @(dateTime.Value.ToString("dd.MM.yyyy HH:mm"))
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(TestTableModel.ExecutorName)" Caption="Imię" Editable/>
            <DataGridColumn Field="@nameof(TestTableModel.Points)" Caption="Punkty" Editable/>
        </DataGridColumns>
        <EmptyTemplate>
            <Paragraph>Nikt nie wykonał jeszcze testu. Bądź pierwszy!</Paragraph>
        </EmptyTemplate>
        <LoadingTemplate>
            <SpinKit Type="SpinKitType.Fold" Size="1rem" Centered="true"/>
        </LoadingTemplate>
        <DetailRowTemplate>
            <Container Flex="Flex.Column.JustifyContent.Center.AlignItems.Center">
                <TestStatisticTableComponent TestId="@context.Id"/>
            </Container>
        </DetailRowTemplate>
    </DataGrid>

    <Div Flex="Flex.JustifyContent.Center">
        <Text TextColor="TextColor.Success">
            <Icon Name="IconName.Lightbulb" Margin="Margin.Is1.OnX"/>
        </Text>
        <Text TextColor="TextColor.Secondary">
            Wybierz test aby wyświetlić szczegółowe statysyki
        </Text>
    </Div>
</Div>

@code{

    private DataGrid<TestTableModel> _tableRef;
    private IReadOnlyList<TestTableModel> _testList;
    private int _totalTests;
    private TestTableModel _selectedTest;

    protected override async Task OnInitializedAsync()
    {
        Courier.Subscribe<TestUpdated>(OnTestUpdated);
        await UpdateTests();
        await base.OnInitializedAsync();
    }

    private async Task OnTestUpdated(TestUpdated testUpdated)
    {
        await UpdateTests();
        await _tableRef.Reload();
        await _tableRef.Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTests()
    {
        var allTest = await TestStore.GetAllTest();
        _testList = allTest.Select(x =>
        {
            var testStatistic = TestService.GetTestStatistic(x);
            return new TestTableModel
            {
                Id = x.Id,
                TestType = x.TestType,
                TextToRewritten = x.TextToRewritten,
                ExecutorName = x.ExecutorName,
                TestDate = x.TestDate,
                InorrectClicks = x.InorrectClicks,
                TotalClicks = x.TotalClicks,
                StartTime = x.StartTime,
                EndTime = x.EndTime,
                TestLenght = testStatistic.TestLenght,
                EffectivenessPercentage = testStatistic.EffectivenessPercentage,
                ClickPerSecond = testStatistic.ClickPerSecond,
                CompletionTime = testStatistic.CompletionTime,
                Mistakes = testStatistic.Mistakes,
                Points = testStatistic.OverallRating
            };
        }).OrderByDescending(x => x.Points).ToList();
    }

    private int GetIndex(Guid testId)
    {
        return _testList.ToList().FindIndex(x => x.Id == testId) + 1;
    }

    public void Dispose()
    {
        Courier.UnSubscribe<TestUpdated>(OnTestUpdated);
    }

    private bool DetailRowTrigger(DetailRowTriggerEventArgs<TestTableModel> arg)
    {
        return arg.Item.Id == _selectedTest?.Id;
    }

}