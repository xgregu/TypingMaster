@implements IDisposable

<style>
    div.Modal {
    position: fixed; 
    left: 0px; 
    top: 0px; 
    z-index: calc(9e999); 
    width: 100%; 
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    background: rgba(00, 00, 00, 0.5);
    backdrop-filter: blur(4px)
    }
    
    div.Spinner {
      color: @_color;
      font-size: 3rem;
      text-indent: -9999em;
      overflow: hidden;
      width: 1em;
      height: 1em;
      border-radius: 50%;
      transform: translateZ(0);
      animation: mltShdSpin 1.7s infinite ease, round 1.7s infinite ease;
    }
    
    @@keyframes mltShdSpin {
      0% {
        box-shadow: 0 -0.83em 0 -0.4em,
        0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,
        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
      }
      5%,
      95% {
        box-shadow: 0 -0.83em 0 -0.4em, 
        0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 
        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
      }
      10%,
      59% {
        box-shadow: 0 -0.83em 0 -0.4em, 
        -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, 
        -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em;
      }
      20% {
        box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em,
         -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, 
         -0.749em -0.34em 0 -0.477em;
      }
      38% {
        box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em,
         -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, 
         -0.82em -0.09em 0 -0.477em;
      }
      100% {
        box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 
        0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
      }
    }
    
    @@keyframes round {
      0% { transform: rotate(0deg) }
      100% { transform: rotate(360deg) }
    }
     
</style>

@if (_isVisible)
{
    <div class="Modal">
        <div class="Spinner"/>
        @if (!string.IsNullOrWhiteSpace(PleaseWaitText) || !string.IsNullOrWhiteSpace(_customPleaseWaitText))
        {
            var text = string.IsNullOrWhiteSpace(_customPleaseWaitText) ? PleaseWaitText : _customPleaseWaitText;
            <div style="max-height: 30vh; max-width: 85vw; overflow-y: auto; overflow: hidden">
                <p class="my-5" style="color: @_color; font-size: 2rem">@(text)</p>
            </div>
        }
    </div>
}

@code {

        private const string DefaultColor = "#0b5ed7";

    [Parameter]
    public string PleaseWaitText { get; set; }

    private string _color = DefaultColor;
    private bool _isVisible;
    private string _customPleaseWaitText;

    public async Task Show(string color = DefaultColor)
    {
        if (_isVisible)
            return;
        
        _isVisible = true;
        _color = color;
        InvokeAsync(StateHasChanged);
        await Task.Delay(500);
    }

    public async Task Hide()
    {
        if (!_isVisible)
            return;

        _isVisible = false;
        _customPleaseWaitText = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    public void SetPleaseWaitText(string text)
    {
        _customPleaseWaitText = text;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Hide();
    }

}