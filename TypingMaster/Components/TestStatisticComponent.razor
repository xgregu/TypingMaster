@using Blazorise
@using System.Globalization
@inject ITestService TestService
@inject ITestStore TestStore
@inject IBrowserContext BrowserContext

<Modal @ref="_modalRef" Shadow="Shadow.Default">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@_title</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Table Striped>
                <TableBody>
                    <TableRow>
                        <TableRowCell>Ranking</TableRowCell>
                        <TableRowCell>@_testRanking</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Punkty</TableRowCell>
                        <TableRowCell>@_testStatistic?.OverallRating</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Typ</TableRowCell>
                        <TableRowCell>@_test?.TestTypeName</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Czas trwania</TableRowCell>
                        <TableRowCell>@_testStatistic?.CompletionTime.Humanize(culture: BrowserContext.BrowserCulture) (@_testStatistic?.CompletionTime)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Kliknięć na minutę</TableRowCell>
                        <TableRowCell>@_testStatistic?.ClickPerSecond</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Skuteczność</TableRowCell>
                        <TableRowCell>@(_testStatistic?.EffectivenessPercentage)%</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>System</TableRowCell>
                        <TableRowCell>@_test?.OsName</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowCell>Urządzenie</TableRowCell>
                        <TableRowCell>
                            <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: center">
                                <DeviceTypeStatistic IsDevice="@_test?.IsDesktop" Name="Desktop"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsMobile" Name="Smartfon"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsTablet" Name="Tablet"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsAndroid" Name="Android"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsIPhone" Name="iPhone"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsIPad" Name="iPad"></DeviceTypeStatistic>
                                <DeviceTypeStatistic IsDevice="@_test?.IsIPadPro" Name="iPad Pro"></DeviceTypeStatistic>
                            </div>
                        </TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Hide">Zamknij</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal _modalRef;
    private Test _test;
    private TestStatistic _testStatistic;
    private int _testRanking;
    private string _title;
    
    public async Task Show(Test test)
    {
        _test = test;
        _testStatistic = TestService.GetTestStatistic(_test);
        _testRanking = await TestStore.GetTestRanking(_test.Id);
        _title = $"Gratulacje {_test.ExecutorName}! Twoje statystki:";
        _modalRef?.Show();
    }

    public async Task Show(TestTableModel testTableModel)
    {
        _title = "Statystki:";

        _test = new Test
        {
            Id = testTableModel.Id,
            TestType = testTableModel.TestType,
            TextToRewritten = testTableModel.TextToRewritten,
            ExecutorName = testTableModel.ExecutorName,
            TestDate = testTableModel.TestDate,
            InorrectClicks = testTableModel.InorrectClicks,
            TotalClicks = testTableModel.TotalClicks,
            StartTime = testTableModel.StartTime,
            EndTime = testTableModel.EndTime, OsName = testTableModel.OsName, IsDesktop = testTableModel.IsDesktop, IsMobile = testTableModel.IsMobile, IsTablet = testTableModel.IsTablet, IsAndroid = testTableModel.IsAndroid, IsIPhone = testTableModel.IsIPhone, IsIPad = testTableModel.IsIPad, IsIPadPro = testTableModel.IsIPadPro,
        };
        _testStatistic = TestService.GetTestStatistic(_test);
        _testRanking = await TestStore.GetTestRanking(_test.Id);
        _modalRef?.Show();
    }

    public Task Hide()
    {
        _modalRef?.Hide();
        return Task.CompletedTask;
    }

}