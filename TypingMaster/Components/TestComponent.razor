@inject IMessageService MessageService
@inject ITestService TestService
@inject INotificationService NotificationService
@inject ITestStore TestStore
@inject IBrowserContext BrowserContext

<Modal @ref="_modalRef" Closing="e => Task.FromResult(e.Cancel = _cancelClose)" Shadow="Shadow.Default" Width="Width.Max100">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Test @(_testInProgress.Type.AsString(EnumFormat.Description))</ModalTitle>
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrWhiteSpace(_executorName) && _executorName.Length >= 3)
            {
                <Paragraph Class="my-2">@_testInProgress.TextToRewritten</Paragraph>
                <MemoEdit TextColor="@_currentTextColor" Placeholder="Zacznij pisać aby rozpocząć test..." Text="@_testInProgress.CurrentText" AutoSize TextChanged="@OnDestinationChanged" Class="my-2"/>
                <Divider DividerType="DividerType.TextContent" Text="Postęp"/>
                <Progress Value="_testInProgress.CompletionPercentage" Animated Striped></Progress>
                <Divider DividerType="DividerType.TextContent" Text="Wykonawca testu"/>
            }
            <Validation UsePattern>
                <TextEdit Pattern="[A-Za-z]{3}" Placeholder="Przedstaw się..." @bind-Text="_executorName" Disabled="_testInProgress.IsStarted">
                    <Feedback>
                        <ValidationError>Wpisz conajmniej 3 znaki!</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Reset" Disabled="!_testInProgress.IsStarted">Rozpocznij od nowa</Button>
            <Button Color="Color.Secondary" Clicked="@Hide">Zamknij test</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<TransparentWaitPopup @ref="_transparentWaitPopupRef"/>
<TestStatisticComponent @ref="_testStatisticComponentRef"/>
@code {

    private TransparentWaitPopup _transparentWaitPopupRef;
    private TestStatisticComponent _testStatisticComponentRef;
    private Modal _modalRef;
    private bool _cancelClose;
    private TextColor _currentTextColor = TextColor.Default;
    private string _executorName = string.Empty;

    private TestInProgress _testInProgress = TestInProgress.EmptyTest();

    private TaskCompletionSource<Test> _confirmationTask;
    
    public async Task<Test> ShowAndWaitForResult(TypingTestType testType, string testText)
    {
        Show(testType, testText);

        return await _confirmationTask.Task;
    }

    public void Show(TypingTestType testType, string testText)
    {
        _testInProgress = TestInProgress.InitializeTest(testText, testType);
        _confirmationTask = new TaskCompletionSource<Test>();
        _cancelClose = true;
        _modalRef?.Show();
    }

    public Task Hide()
    {
        _cancelClose = false;
        _modalRef?.Hide();
        return Task.CompletedTask;
    }

    private Task Reset()
    {
        _testInProgress = TestInProgress.InitializeTest(_testInProgress.TextToRewritten, _testInProgress.Type);
        return Task.CompletedTask;
    }

    private async Task OnDestinationChanged(string value)
    {
        var isCorrect = _testInProgress.UpdateCurrentText(value);
        _currentTextColor = isCorrect ? TextColor.Default : TextColor.Danger;

        if (_testInProgress.IsComplete)
            await EndTest();
    }

    private async Task EndTest()
    {
        await _transparentWaitPopupRef.Show();
        var test = TestService.TestInProgressEnd(_testInProgress, _executorName, BrowserContext.BrowserInfo);
        await TestStore.Add(test);
        await Hide();
        await _transparentWaitPopupRef.Hide();
        await _testStatisticComponentRef.Show(test);
        _confirmationTask.SetResult(test);
    }

}