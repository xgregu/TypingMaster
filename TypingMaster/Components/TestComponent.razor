@inject IMessageService MessageService
@inject ITestService TestService
@inject INotificationService NotificationService
@inject ITestStore TestStore

<Modal @ref="_modalRef" Closing="e => Task.FromResult(e.Cancel = _cancelClose)" Shadow="Shadow.Default">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Test</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Paragraph Class="my-2">@_test.TextToRewritten</Paragraph>
            <MemoEdit TextColor="@_currentTextColor" Placeholder="Zacznij pisać aby rozpocząć test..." Text="@_test.CurrentText" AutoSize TextChanged="@OnDestinationChanged" Class="my-2"/>
            <Divider DividerType="DividerType.TextContent" Text="Postęp"/>
            <Progress Value="@_test.CompletionPercentage" Animated Striped></Progress>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Reset" Disabled="!_test.IsStarted">Rozpocznij od nowa</Button>
            <Button Color="Color.Secondary" Clicked="@Hide">Zakończ test</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<PleaseWaitPopup @ref="_pleaseWaitPopupRef"></PleaseWaitPopup>

@code {

    private PleaseWaitPopup _pleaseWaitPopupRef;
    private Modal _modalRef;
    private bool _cancelClose;
    private TextColor _currentTextColor = TextColor.Default;
    [Parameter] public EventCallback OnTestCompleted { get; set; }

    private Test _test = Test.EmptyTest();

    public Task Show(TypingTestType testType, string testText, string executorName)
    {
        _test = Test.InitializeTest(testType, testText, executorName);
        _cancelClose = true;
        _modalRef?.Show();
        return Task.CompletedTask;
    }

    public Task Hide()
    {
        _cancelClose = false;
        _modalRef?.Hide();
        return Task.CompletedTask;
    }

    private Task Reset()
    {
        _test = Test.InitializeTest(_test.TestType, _test.TextToRewritten, _test.ExecutorName);
        return Task.CompletedTask;
    }

    private async Task OnDestinationChanged(string value)
    {
        var isCorrect = _test.UpdateCurrentText(value);
        _currentTextColor = isCorrect ? TextColor.Default : TextColor.Danger;

        if (!_test.IsComplete)
            return;

        await _pleaseWaitPopupRef.Show();
        var addTestTask = TestStore.Add(_test);
        Task.WaitAll(addTestTask, Task.Delay(2000));
        await OnTestCompleted.InvokeAsync();
        await _pleaseWaitPopupRef.Hide();


        var statistic = TestService.GetTestStatistic(_test);
        var statisticText = $"Czas trwania - {statistic.CompletionTime}. Kliknięć na sekunde - {statistic.ClickPerSecond}. Skuteczność - {statistic.EffectivenessPercentage}%. Błędów - {statistic.Mistakes}";
        await MessageService.Info($"Statystki testu: \n\n{statisticText}", "Gratulacje!");
    }

}