@page "/TypingTests"
@page "/"
@inject IOptions<TypingTestOptions> Options

<PageTitle>Test</PageTitle>
<Div Flex="Flex.JustifyContent.Center.Column.AlignItems.Stretch" Width="Width.Is100">
    <Div Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is5">Wybierz test</Heading>
    </Div>
    <Div Flex="Flex.AlignItems.Center.JustifyContent.Center.OnFullHD.AlignItems.Center.JustifyContent.Center.OnMobile.Wrap" Padding="Padding.Is1.OnX">
        <Button Color="Color.Primary" Margin="Margin.Is1" Clicked="() => StartTest(TypingTestType.Minimalistic)">Minimalistyczny</Button>
        <Button Color="Color.Secondary" Margin="Margin.Is1" Clicked="() => StartTest(TypingTestType.Short)">Krótki</Button>
        <Button Color="Color.Success" Margin="Margin.Is1" Clicked="() => StartTest(TypingTestType.Average)">Średni</Button>
        <Button Color="Color.Warning" Margin="Margin.Is1" Clicked="() => StartTest(TypingTestType.Long)">Długi</Button>
        <Button Color="Color.Danger" Margin="Margin.Is1" Clicked="() => StartTest(TypingTestType.Verylong)">Bardzo długi</Button>

    </Div>
    <Div Flex="Flex.JustifyContent.Center">
        <Text TextColor="TextColor.Danger" Margin="Margin.Is1.OnX">
            Uwaga!
        </Text>
        <Text TextColor="TextColor.Secondary">
            Długość testu wpływa na jego poziom trudności
        </Text>
    </Div>

    <Heading Size="HeadingSize.Is5" Class="mt-3">Ranking</Heading>
    <TestTableComponent @ref="_testTableComponent"></TestTableComponent>
    <TestComponent @ref="_testModalRef"></TestComponent>
</Div>

@code
{
    private TestComponent _testModalRef;
    private TestTableComponent _testTableComponent;
    private TypingTestTextOptions[] _typingTestTexts;

    protected override Task OnInitializedAsync()
    {
        _typingTestTexts = Options.Value.TypingTestTexts;
        return base.OnInitializedAsync();
    }

    private async void StartTest(TypingTestType testType)
    {
        var testText = GetTypingTestText(testType);
        _ = await _testModalRef.ShowAndWaitForResult(testType, testText);
    }

    private string GetTypingTestText(TypingTestType type)
    {
        return _typingTestTexts.FirstOrDefault(x => x.Type == type)?.Text ?? "ERROR";
    }
}