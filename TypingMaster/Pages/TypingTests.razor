@page "/TypingTests"
@page "/"
@inject IOptions<TypingTestOptions> Options

<PageTitle>Test</PageTitle>
<Div Style="text-align: center" Class="px-2">
    <Fields>
        <Field>
            <Heading Size="HeadingSize.Is5">Wybierz test</Heading>
            <Buttons Shadow="Shadow.Large">
                <Buttons>
                    <Button Color="Color.Primary" Clicked="() => StartTest(TypingTestType.Minimalistic)">Minimalistyczny</Button>
                    <Button Color="Color.Secondary" Clicked="() => StartTest(TypingTestType.Short)">Krótki</Button>
                    <Button Color="Color.Success" Clicked="() => StartTest(TypingTestType.Average)">Średni</Button>
                    <Button Color="Color.Warning" Clicked="() => StartTest(TypingTestType.Long)">Długi</Button>
                    <Button Color="Color.Danger" Clicked="() => StartTest(TypingTestType.Verylong)">Bardzo długi</Button>
                </Buttons>
            </Buttons>
            <FieldHelp>
                <Text TextColor="TextColor.Danger">
                    Uwaga!
                </Text>
                <Text TextColor="TextColor.Secondary">
                    Długość testu wpływa na jego poziom trudności
                </Text>
            </FieldHelp>
        </Field>
    </Fields>
    <Heading Size="HeadingSize.Is5" Class="mt-3">Ranking</Heading>
    <TestTableComponent @ref="_testTableComponent"></TestTableComponent>
</Div>
<TestComponent @ref="_testModalRef"></TestComponent>

@code {


    private TestComponent _testModalRef;
    private TestTableComponent _testTableComponent;
    private TypingTestTextOptions[] _typingTestTexts;

    protected override Task OnInitializedAsync()
    {
        _typingTestTexts = Options.Value.TypingTestTexts;
        return base.OnInitializedAsync();
    }

    private async void StartTest(TypingTestType testType)
    {
        var text = GetTypingTestText(testType);
        var test = await _testModalRef.ShowAndWaitForResult(testType, text);
        await _testTableComponent.ScrollToTest(test.Id);
    }

    private string GetTypingTestText(TypingTestType type) => _typingTestTexts.FirstOrDefault(x => x.Type == type)?.Text ?? "ERROR";


}