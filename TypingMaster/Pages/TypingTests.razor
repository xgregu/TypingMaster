@page "/TypingTests"
@page "/"

@inject IOptions<TypingTestOptions> Options

<PageTitle>Test</PageTitle>
<Div Flex="Flex.JustifyContent.Center.Column.AlignItems.Stretch" Width="Width.Is100">
    <Div Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is5">Wybierz test</Heading>
    </Div>
    <Div Flex="Flex.AlignItems.Center.JustifyContent.Center.OnFullHD.AlignItems.Center.JustifyContent.Center.OnMobile.Wrap" Padding="Padding.Is1.OnX">
        @foreach (var type in (TypingTestType[])Enum.GetValues(typeof(TypingTestType)))
        {
            @GetButton(type)
        }
    </Div>
    <Div Flex="Flex.JustifyContent.Center">
        <Text TextColor="TextColor.Danger" Margin="Margin.Is1.OnX">
            Uwaga!
        </Text>
        <Text TextColor="TextColor.Secondary">
            Długość testu wpływa na jego poziom trudności
        </Text>
    </Div>

    <Heading Size="HeadingSize.Is5" Class="mt-3">Ranking</Heading>
    <TestTableComponent @ref="_testTableComponent"></TestTableComponent>
    <TestComponent @ref="_testModalRef"></TestComponent>
</Div>

@code
{
    private TestComponent _testModalRef;
    private TestTableComponent _testTableComponent;
    private TypingTestTextOptions[] _typingTestTexts;

    protected override Task OnInitializedAsync()
    {
        _typingTestTexts = Options.Value.TypingTestTexts;
        return base.OnInitializedAsync();
    }

    private async void StartTest(TypingTestType testType)
    {
        var testText = GetTypingTestText(testType);
        _ = await _testModalRef.ShowAndWaitForResult(testType, testText);
    }

    private string GetTypingTestText(TypingTestType type)
    {
        return _typingTestTexts
            .Where(x => x.Type == type)
            .MinBy(x => Guid.NewGuid())?.Text ?? "ERROR";
    }

    private RenderFragment GetButton(TypingTestType type)
    {
        var text = type.AsString(EnumFormat.Description);
        var testAvaiable = _typingTestTexts.Any(x => x.Type == type);
        var color = GetColor(type);

        return @<Button
                    Color="color"
                    Margin="Margin.Is1"
                    Clicked="() => StartTest(type)"
                    Disabled="!testAvaiable"
                    Outline="!testAvaiable"
                    @key="type">
                   @text
               </Button>;
    }

    private static Color GetColor(TypingTestType type)
    {
        return type switch
        {
            TypingTestType.Minimalistic => Color.Primary,
            TypingTestType.Short => Color.Secondary,
            TypingTestType.Average => Color.Success,
            TypingTestType.Long => Color.Warning,
            TypingTestType.Verylong => Color.Danger,
            _ => Color.Primary
            };
    }
}