@page "/TypingTests"
@inject IOptions<TypingTest> Options

<PageTitle>Test</PageTitle>

<Fields>
    <Field>
        <FieldLabel></FieldLabel>
        <Heading Size="HeadingSize.Is5">Wybierz długość testu</Heading>
        <RadioGroup TValue="TypingTestType" Name="types" Color="Color.Light" Buttons @bind-CheckedValue="_typingTestType">
            <Radio Value="@TypingTestType.Minimalistic">Minimalistyczny</Radio>
            <Radio Value="@TypingTestType.Short">Krótki</Radio>
            <Radio Value="@TypingTestType.Average">Średni</Radio>
            <Radio Value="@TypingTestType.Long">Długi</Radio>
            <Radio Value="@TypingTestType.Verylong">Bardzo długi</Radio>
        </RadioGroup>
        <FieldHelp>
            <Text TextColor="TextColor.Danger">
                Uwaga!
            </Text>
            <Text TextColor="TextColor.Secondary">
                Długość testu wpływa na jego poziom trudności
            </Text>
        </FieldHelp>
    </Field>
</Fields>
<Button Color="Color.Primary" Clicked="@StartTest">StartTest</Button>

<TestComponent @ref="_testModalRef"></TestComponent>
<NameComponent @ref="_nameModalRef"></NameComponent>

@code {


    private readonly TypingTestType _typingTestType = TypingTestType.Average;
    private TestComponent _testModalRef;
    private NameComponent _nameModalRef;

    private async Task StartTest()
    {
        var executorName = await _nameModalRef.ShowAndWaitForResult();
        if (string.IsNullOrWhiteSpace(executorName))
            return;

        var text = Options.Value.TypingTestTexts.FirstOrDefault(x => x.Type == _typingTestType)?.Text ?? "ERROR";
        await _testModalRef.Show(_typingTestType, text, executorName);
    }

}