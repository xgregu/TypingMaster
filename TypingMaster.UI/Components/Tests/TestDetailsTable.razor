@inject ApiClient ApiClient
@inject ICultureContext CultureContext

<style>
    .background-table {
        position: relative;
        border-radius: 10px;
        padding: 10px;
    }
    
    .background-table:before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-image: url('@BackgroundPath');
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
        border-radius: 10px;
        opacity: 0.3;
    }
    
    .table-content {
        position: relative;
        z-index: 1;
    }
</style>

@if (Test is not null)
{
    <table class="table table-striped table-responsive @(string.IsNullOrWhiteSpace(BackgroundPath) ? string.Empty : "background-table")">
        <tbody class="table-content">
        <tr>
            <td>@Localizer["Ranking"]</td>
            <td>
                @if (TestRanking is null)
                {
                    <div class="spinner-border spinner-border-sm" role="status"></div>
                }
                else
                {
                    @TestRanking
                }
            </td>
        </tr>
        <tr>
            <td>@Localizer["Points"]</td>
            <td>@Test.Statistics?.OverallRating</td>
        </tr>
        <tr>
            <td>@Localizer["Type"]</td>
            <td>

                @if (string.IsNullOrWhiteSpace(LevelName))
                {
                    <div class="spinner-border spinner-border-sm" role="status"></div>
                }
                else
                {
                    @LevelName
                }
            </td>
        </tr>
        <tr>
            <td>@Localizer["Duration"]</td>
            <td>@CompletionTime.Humanize(culture: CultureContext.CurrentCulture) (@CompletionTime)</td>
        </tr>
        <tr>
            <td>@Localizer["ClicksPerMinute"]</td>
            <td>@Test.Statistics.ClickPerMinute</td>
        </tr>
        <tr>
            <td>@Localizer["Effectiveness"]</td>
            <td>@(Test.Statistics.EffectivenessPercentage)%</td>
        </tr>
        </tbody>
    </table>
}

@code {
    private string BackgroundPath => GetBackgroundPath();

    private TimeSpan CompletionTime => TimeSpan.FromMilliseconds(Test?.Statistics.CompletionTimeMilliseconds ?? 0);
    private CancellationTokenSource _cts = new();

    [Parameter]
    [EditorRequired]
    public string? LevelName { get; set; }

    [Parameter]
    [EditorRequired]
    public long? TestRanking { get; set; }

    [Parameter]
    [EditorRequired]
    public TypingTestDto? Test { get; set; }

    private string GetBackgroundPath()
    {
        return TestRanking switch
        {
            1 => "medal_gold.png",
            2 => "medal_silver.png",
            3 => "medal_bronze.png",
            _ => string.Empty
            };
    }

}