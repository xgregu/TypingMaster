@inject ApiClient ApiClient
@inject LanguageService LanguageService
@implements IDisposable

<style>
   tbody tr {
    max-height: 40px;
    min-height: 40px;
    height: 40px;
    vertical-align: middle;
    }
</style>

<div class="w-100" style="max-height: 72vh; height: 72vh; overflow-y: auto">
    <div class="d-flex justify-content-between">
        <span class="text-primary text-start mx-2">
            @Localizer["Ranking"]
        </span>
        <span class="text-secondary text-end mx-2">
            @Localizer["SelectATestToViewDetailedStatistics"]
        </span>
    </div>

    <table class="table table-hover table-striped w-100">
        <thead class="table-active">
        <th class="w-25" scope="col">@Localizer["Date"]</th>
        <th class="w-50" scope="col">@Localizer["Name"]</th>
        <th class="w-25" scope="col">@Localizer["Points"]</th>
        </thead>
        <tbody class="table-group-divider">
        <Virtualize ItemsProvider="GetTests" Context="test" OverscanCount="100" ItemSize="40">
            <ItemContent>
                <tr @onclick="() => OnTestClicked(test)">
                    <td class="w-25">@test.StartTime.DateTime.ToShortDateString() @test.StartTime.DateTime.ToShortTimeString()</td>
                    <td class="w-50">@test.ExecutorName</td>
                    <td class="w-25">@test.Statistics.OverallRating</td>
                </tr>
            </ItemContent>
            <Placeholder>
                <tr>
                    <td colspan="3" class="text-center">@Localizer["Loading"]...</td>
                </tr>
            </Placeholder>
        </Virtualize>
        </tbody>
    </table>
</div>
<TestDetailsModal @ref="_testDetailsModalRef"/>

@code{

    private TestDetailsModal _testDetailsModalRef = default!;
    private CancellationTokenSource _cts = new();

    private async ValueTask<ItemsProviderResult<TypingTestDto>> GetTests(ItemsProviderRequest request)
    {
        try
        {
            await ResetCts();

            var pagedResponse = await ApiClient.GetTestPage(request.StartIndex, request.Count, _cts.Token);
            if (pagedResponse is null)
                return new ItemsProviderResult<TypingTestDto>(Array.Empty<TypingTestDto>(), 0);

            return new ItemsProviderResult<TypingTestDto>(pagedResponse.Tests, (int) pagedResponse.TotalCount);
        }
        catch (OperationCanceledException)
        {
            return new ItemsProviderResult<TypingTestDto>(Array.Empty<TypingTestDto>(), 0);
        }
    }

    private async Task OnTestClicked(TypingTestDto test)
    {
        await _testDetailsModalRef.Show(test);
    }

    private async Task ResetCts()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
        _cts = new CancellationTokenSource();
    }

    public void Dispose()
    {
        _ = ResetCts();
    }

}