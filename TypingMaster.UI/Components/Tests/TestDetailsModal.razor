@inject ApiClient ApiClient

<ModalBase @ref="_modalBaseRef">
    <Title>
        @_test?.ExecutorName
    </Title>
    <Body>
    <TestDetailsTable Test="_test" TestRanking="_testRanking" LevelName="@_levelName"/>
    </Body>
    <Footer>
        <Button Color="@Color.Primary" Clicked="Deinitialize">Zamknij</Button>
    </Footer>
</ModalBase>

@code {

    private ModalBase _modalBaseRef = default!;
    private TypingTestDto? _test;
    private string _title = string.Empty;
    private CancellationTokenSource _cts = new();
    private long? _testRanking;
    private string? _levelName;

    public async Task Show(TypingTestDto? test)
    {
        if (test == null)
            return;

        await Initialize(test);
    }

    private async Task Initialize(TypingTestDto test)
    {
        _test = test;
        _ = UpdateLevelName();
        _ = UpdateRanking();

        await _modalBaseRef.Show();
    }

    private async Task UpdateLevelName()
    {
        _levelName = await ApiClient.GetTypingLevelName(_test!.Text.DifficultyLevel);
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateRanking()
    {
        _testRanking = await ApiClient.GetTestRanking(_test!.Id, _cts.Token);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ResetCts()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
        _cts = new CancellationTokenSource();
    }

    private async Task Deinitialize()
    {
        await ResetCts();
        _test = null;
        _testRanking = null;
        await _modalBaseRef.Hide();
    }

    public void Dispose()
    {
        _ = Deinitialize();
    }


}