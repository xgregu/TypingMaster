@using TypingMaster.UI.Components.Tests.Models
@inject IMessageService MessageService
@inject INotificationService NotificationService
@inject ApiClient ApiClient

<style>
.separator {
  display: flex;
  align-items: center;
  text-align: center;
  color: #adb5bd;
}

.separator::before,
.separator::after {
  content: '';
  flex: 1;
  border-bottom: 1px solid #000;
}

.separator:not(:empty)::before {
  margin-right: .25em;
  color: #adb5bd;
}

.separator:not(:empty)::after {
  margin-left: .25em;
  color: #adb5bd;

}
</style>

<ModalBase @ref="_modalBaseRef" IsCentered>
    <Title>
        @Localizer["GoodLuck"]!
    </Title>
    <Body>
    @if (_executorNameIsValid)
    {
        <Highlighter Class="my-2" Style="@StyleHighlighter" Text="@_testInProgress.Text.Text" HighlightedText="@_inputText" CaseSensitive/>
        <MemoEdit Background="Background.Transparent" TextColor="@_currentTextColor" Placeholder="@MemoEditPlaceholder" Text="@_testInProgress.CurrentText" AutoSize TextChanged="@OnDestinationChanged" Class="my-2"/>

        <div class="progress" role="progressbar" aria-valuenow="@_testInProgress.CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: @_testInProgress.CompletionPercentage%">@_testInProgress.CompletionPercentage%</div>
        </div>

        <div class="separator">@_testInProgress.CurrentTestTime.ToString()</div>
    }
    <Validation Validator="ValidateExecutorName">
        <TextEdit Background="Background.Transparent" Placeholder="@ExecutorNamePlaceholder" @bind-Text="_executorName" Disabled="_testInProgress.IsStarted"/>
    </Validation>
    </Body>
    <Footer>
        <Button Color="Color.Primary" Clicked="@Clear" Outline="@(!_testInProgress.IsStarted)" Disabled="@(!_testInProgress.IsStarted)" >@Localizer["StartOver"]</Button>
        <Button Color="Color.Secondary" Clicked="@Hide">@Localizer["Close"]</Button>
    </Footer>
</ModalBase>
<TestDetailsModal @ref="_testDetailsModalRef"/>

@code {
        private const int RequiredExecutorNameLenght = 2;
        private const string StyleHighlighter = "background-color: #80bdff; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none;-moz-user-select: none; -ms-user-select: none; user-select: none;";

    private string ExecutorNamePlaceholder => $"{Localizer["IntroduceYourself"]}...";
    private string MemoEditPlaceholder => _testInProgress.IsStarted ? string.Empty : $"{Localizer["StartTypingToStartTheTest"]}...";
    private TestDetailsModal _testDetailsModalRef = default!;
    private ModalBase? _modalBaseRef = default!;
    private bool _cancelClose;
    private TextColor _currentTextColor = TextColor.Default;
    private string _executorName = string.Empty;
    private bool _executorNameIsValid = false;


    private TestInProgress _testInProgress = TestInProgress.EmptyTest();

    private TaskCompletionSource _confirmationTask;
    private string? _inputText;

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(TestWatcher);
        await base.OnInitializedAsync();
    }

    public async Task ShowAndWaitForResult(TypingLevelDto typingLevel)
    {
        try
        {
            await PleaseWaitService.Show();
            var texts = await ApiClient.GetAllTypingTypingTextByDifficultyLevel(typingLevel.DifficultyLevel);
            _testInProgress = TestInProgress.InitializeTest(texts.MinBy(x => Guid.NewGuid()));
            _confirmationTask = new TaskCompletionSource();
            _cancelClose = true;
            await _modalBaseRef?.Show()!;
            PleaseWaitService.Hide();
            await _confirmationTask.Task;
        }
        finally
        {
            await Hide();
        }
    }

    private async Task Hide()
    {
        await Clear();
        _cancelClose = false;
        PleaseWaitService.Hide();
        _modalBaseRef?.Hide();
    }

    private async Task Clear()
    {
        _testInProgress = TestInProgress.InitializeTest(_testInProgress.Text);
        _inputText = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnDestinationChanged(string? value)
    {
        if (!string.IsNullOrWhiteSpace(value) && !_testInProgress.IsStarted)
            _testInProgress.StartTest();

        _inputText = value;
        var isCorrect = _testInProgress.UpdateCurrentText(value);
        _currentTextColor = isCorrect ? TextColor.Default : TextColor.Danger;
        if (_testInProgress.IsComplete)
            await EndTest();
    }

    private async Task EndTest()
    {
        try
        {
            await PleaseWaitService.Show(new PleaseWaitParameters
            {
                Color = "#0b5ed7"
            });
            var test = _testInProgress.EndTest(_executorName);

            var createdTest = await ApiClient.CreateTest(test);
            PleaseWaitService.Hide();
            await _testDetailsModalRef.Show(createdTest);
        }
        finally
        {
            _confirmationTask.SetResult();
        }
    }

    private void ValidateExecutorName(ValidatorEventArgs e)
    {
        var executorNamePattern = $"[A-Za-z]{{{RequiredExecutorNameLenght}}}";
        var executorNameRegex = new Regex(executorNamePattern);

        var executorName = Convert.ToString(e.Value);
        e.Status = string.IsNullOrEmpty(executorName) ? ValidationStatus.None :
            executorNameRegex.IsMatch(executorName) ? ValidationStatus.Success : ValidationStatus.Error;

        _executorNameIsValid = e.Status == ValidationStatus.Success;
    }

    private async Task TestWatcher()
    {
        while (true)
        {
            if (_testInProgress.IsStarted)
                await InvokeAsync(StateHasChanged);

            await Task.Delay(25);
        }
    }

}