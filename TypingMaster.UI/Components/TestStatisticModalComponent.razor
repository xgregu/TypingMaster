@inject ApiClient ApiClient

<style>
  .EnableBlur>* {
    filter: blur(5px);
  }
  
  .DisableBlur {
    filter: blur(0);
  }
</style>
<Modal @ref="_modalRef" Shadow="Shadow.Default" Closed="@OnClosed" Opened="OnOpened">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>
                   @_test?.ExecutorName
            </ModalTitle>
        </ModalHeader>
        <ModalBody Class="@BlurClass">
            <TestStatisticTableComponent Test="_test" TestRanking="_testRanking"/>
        </ModalBody>
        <ModalFooter>
            <Button Color="@(_isLoading ? Color.Secondary : Color.Primary)" Clicked="@Hide" Loading="_isLoading" Disabled="@_isLoading">@(_isLoading ? "  Ładowanie statystyk" : "Zamknij")</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private string BlurClass => _isLoading ? "EnableBlur" : "DisableBlur";

    private Modal _modalRef = default!;
    private TypingTestDto? _test;
    private string _title = string.Empty;
    private long _testRanking;
    private bool _isLoading = true;

    public async Task Show(TypingTestDto? test)
    {
        if (test == null)
            return;
        
        _test = test;
        
        await _modalRef.Show();
    }
    
    private async Task OnOpened()
    {
        _testRanking = await ApiClient.GetTestRanking(_test!.Id);
        _isLoading = false;
        
        await InvokeAsync(StateHasChanged);
    }

    public async Task Hide()
    {
        await _modalRef.Hide();
    }

    private void OnClosed()
    {
        _title = string.Empty;
        _test = null;
        _testRanking = -1;
        _isLoading = true;
    }
}