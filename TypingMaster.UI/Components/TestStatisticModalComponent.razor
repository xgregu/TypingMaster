@inject ApiClient ApiClient

<Modal @ref="_modalRef" Shadow="Shadow.Default" Closed="Deinitialize">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>
                   @_test?.ExecutorName
            </ModalTitle>
        </ModalHeader>
        <ModalBody>
            <TestStatisticTableComponent Test="_test" TestRanking="_testRanking"/>
        </ModalBody>
        <ModalFooter>
            <Button Color="@Color.Primary" Clicked="@(() => _modalRef.Hide())">Zamknij</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private Modal _modalRef = default!;
    private TypingTestDto? _test;
    private string _title = string.Empty;
    private CancellationTokenSource _cts = new();
    private long? _testRanking;

    public async Task Show(TypingTestDto? test)
    {
        if (test == null)
            return;

        await Initialize(test);
    }

    private async Task Initialize(TypingTestDto test)
    {
        _test = test;
        _ = UpdateRanking();
        
        await _modalRef.Show();
    }

    private async Task UpdateRanking()
    {        
        _testRanking = await ApiClient.GetTestRanking(_test!.Id, _cts.Token);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ResetCts()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
        _cts = new CancellationTokenSource();
    }
    
    private async Task Deinitialize()
    {
        await ResetCts();
        _test = null;
        _testRanking = null;
    }
    
    public void Dispose()
    {
        _ = Deinitialize();
    }
}