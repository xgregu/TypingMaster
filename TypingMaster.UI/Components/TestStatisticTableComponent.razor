@inject ApiClient ApiClient

@if (Test is not null)
{
    <Table Striped Responsive>
        <TableBody>
            <TableRow>
                <TableRowCell>Ranking</TableRowCell>
                <TableRowCell>
                    @if (_testRanking is null)
                    {
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                    }
                    else
                    {
                        @_testRanking
                    }
                </TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Punkty</TableRowCell>
                <TableRowCell>@Test.Statistics?.OverallRating</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Typ</TableRowCell>
                <TableRowCell>@Test.Text.Level.Name</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Czas trwania</TableRowCell>
                <TableRowCell>@CompletionTime.Humanize() (@CompletionTime)</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Kliknięć na minutę</TableRowCell>
                <TableRowCell>@Test.Statistics.ClickPerMinute</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Skuteczność</TableRowCell>
                <TableRowCell>@(Test.Statistics.EffectivenessPercentage)%</TableRowCell>
            </TableRow>
        </TableBody>
    </Table>
}

@code {
    private TypingTestDto? _test;
    private long? _testRanking;
    private TimeSpan CompletionTime => TimeSpan.FromMilliseconds(Test?.Statistics.CompletionTimeMilliseconds ?? 0);


    [Parameter]
    [EditorRequired]
    public TypingTestDto? Test
    {
        get => _test;
        set
        {
            if(_test?.Id == value?.Id)
                return;
            
            _test = value;
            
            if (_test is null)
            {
                _testRanking = null;
            }
            else
            {
                _ = UpdateRanking();
            }
        }
    }

    private async Task UpdateRanking()
    {
        _testRanking = await ApiClient.GetTestRanking(_test!.Id);
        await InvokeAsync(StateHasChanged);
    }
}