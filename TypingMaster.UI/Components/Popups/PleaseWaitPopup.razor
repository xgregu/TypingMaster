@implements IDisposable

<style>
    div.Modal {
    position: fixed; 
    left: 0px; 
    top: 0px; 
    z-index: calc(9e999); 
    width: 100%; 
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    background: rgba(00, 00, 00, 0.5);
    backdrop-filter: blur(4px)
    }     
</style>

@if (IsVisible)
{
    <div class="Modal">
        <Loader Color="@_color"/>
        @if (!string.IsNullOrWhiteSpace(PleaseWaitText) || !string.IsNullOrWhiteSpace(_customPleaseWaitText))
        {
            var text = string.IsNullOrWhiteSpace(_customPleaseWaitText) ? PleaseWaitText : _customPleaseWaitText;
            <div style="max-height: 30vh; max-width: 85vw; overflow-y: auto; overflow: hidden">
                <p class="my-5" style="color: @_color; font-size: 2rem">@(text)</p>
            </div>
        }
    </div>
}

@code {
    
        private const string DefaultColor = "black";
    
    [Parameter]
    public string PleaseWaitText { get; set; } = default!;

    [Parameter]
    public bool IsVisible { get; set; }

    private string _color = DefaultColor;
    private string _customPleaseWaitText = string.Empty;

    public async Task Show(string color = DefaultColor)
    {
        if (IsVisible)
            return;

        IsVisible = true;
        _color = color;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(500);
    }

    public async Task Hide()
    {
        if (!IsVisible)
            return;

        IsVisible = false;
        _customPleaseWaitText = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    public void SetPleaseWaitText(string text)
    {
        _customPleaseWaitText = text;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _ = Hide();
    }
}