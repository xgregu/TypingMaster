@page "/TypingTests"
@page "/"

@inject NavigationManager NavigationManager
@inject ApiClient ApiClient
<div class="container-fluid d-flex flex-column align-items-center">
    <div class="d-flex w-100 justify-content-start align-items-center py-2">
        <div class="w-25 text-center d-flex flex-column align-items-center">
            <img src="logo.png" class="img-fluid" style="max-height: 15vh" @onclick="() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true)"/>
        </div>
        <div class="w-100 d-flex flex-column justify-content-center align-items-center overflow-x-auto" style="max-height: 15vh">
            @if (_typingLevels.Any())
            {
                <div class="d-none d-md-flex d-flex align-items-center justify-content-center flex-wrap flex-md-nowrap p-1 w-100">
                    @foreach (var typingLevel in _typingLevels)
                    {
                        @GetButton(typingLevel)
                    }
                </div>
                <div class="d-md-none w-75">
                    <button class="btn btn-secondary dropdown-toggle btn-lg btn-block w-100" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        @Localizer["SelectTest"]
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end text-white bg-dark bg-opacity-75" aria-labelledby="dropdownMenuButton">
                        @foreach (var typingLevel in _typingLevels)
                        {
                            <a class="dropdown-item">
                                @GetButton(typingLevel)
                            </a>
                        }
                    </ul>
                </div>
            }
            else
            {
                <div class="spinner-border" role="status"></div>
            }
        </div>
        <div class="w-25 d-flex justify-content-end align-items-center">
            <SelectLanguage/>
        </div>
    </div>

    <div class="d-flex justify-content-center">
        <p class="text-danger mx-1">@Localizer["Attention"]!</p>
        <p class="text-secondary mx-1">@Localizer["TheLengthOfTheTestAffectsItsDifficultyLevel"]</p>
    </div>
    <div class="container-fluid d-flex justify-content-center">
        <TestRankingComponent @ref="_testRankingComponent"/>
    </div>
</div>

<TestComponent @ref="_testModalRef"/>
<TestDetailsModal @ref="_testDetailsModalRef"/>

@code
{
    private ICollection<TypingLevelDto> _typingLevels = new List<TypingLevelDto>();

    private TestComponent _testModalRef = default!;
    private TestRankingComponent _testRankingComponent = default!;
    private TestDetailsModal _testDetailsModalRef = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!_typingLevels.Any())
            await RefreshTypingLevels();

        await base.OnInitializedAsync();
    }

    private async Task RefreshTypingLevels()
    {
        try
        {
            _typingLevels = await ApiClient.GetAllTypingLevels() ?? new List<TypingLevelDto>();
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
    // ignored
        }
    }

    private async Task StartTest(TypingLevelDto typingLevel)
    {
        try
        {
            var test = await _testModalRef.ShowAndWaitForResult(typingLevel);
            if (test is not null)
            {
                var createdTest = await ApiClient.CreateTest(test);
                await _testDetailsModalRef.Show(createdTest);
            }
        }
        finally
        {
            PleaseWaitService.Hide();
        }
    }

    private RenderFragment GetButton(TypingLevelDto typingLevel) =>
        @<button
             type="button"
             class="@GetButtonClass(typingLevel)"
             @onclick="() => StartTest(typingLevel)"
             @key="typingLevel">
            @typingLevel.Name
        </button>;

    private static string GetButtonClass(TypingLevelDto type)
    {
        var btnColor = type.DifficultyLevel switch
        {
            1 => "primary",
            2 => "secondary",
            3 => "success",
            4 => "warning",
            5 => "danger",
            _ => "primary"
            };

        return $"btn btn-{btnColor} m-1 btn-block w-100";
    }
}